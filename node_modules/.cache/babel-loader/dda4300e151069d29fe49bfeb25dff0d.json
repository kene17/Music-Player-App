{"ast":null,"code":"var _jsxFileName = \"/Users/kene17/Desktop/01-starting-project 6/src/components/LibrarySong.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = props => {\n  const songSelectHandler = e => {\n    const selectedSong = props.songs.filter(state => state.id === props.id); //filter returns us an array, also checks if the thing i clicked on equals the id from the state\n\n    console.log(e);\n    props.setCurrentSong(selectedSong[0]); //Add Active State\n\n    const newSongs = props.songs.map(song => {\n      if (song.id === id) {\n        //id reps the song that we clicked on, son\n        return { ...song,\n          //keep the rest of the properties like the title, artist name the same\n          active: true //but change the active to true\n\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    }); //check if song is playing\n\n    if (props.isPlaying === true) {\n      const playPromise = props.audioRef.current.play();\n\n      if (playPromise !== undefined) {\n        //if what we clicked on is undefined, we should wait a bit\n        playPromise.then(audio => {\n          // this is the wait, when it finally loads up we play it\n          props.audioRef.current.play();\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `library-song ${props.song.active ? \"selected\" : \"\"}`,\n    onClick: songSelectHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: props.song.name,\n      src: props.song.cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" \", props.song.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\" \", props.song.artist]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/Users/kene17/Desktop/01-starting-project 6/src/components/LibrarySong.js"],"names":["React","LibrarySong","props","songSelectHandler","e","selectedSong","songs","filter","state","id","console","log","setCurrentSong","newSongs","map","song","active","isPlaying","playPromise","audioRef","current","play","undefined","then","audio","name","cover","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAMC,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,UAAMC,YAAY,GAAGH,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAoBC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaP,KAAK,CAACO,EAAjD,CAArB,CAD+B,CAC4C;;AAC3EC,IAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ;AACAF,IAAAA,KAAK,CAACU,cAAN,CAAqBP,YAAY,CAAC,CAAD,CAAjC,EAH+B,CAI/B;;AACA,UAAMQ,QAAQ,GAAGX,KAAK,CAACI,KAAN,CAAYQ,GAAZ,CAAiBC,IAAD,IAAU;AACzC,UAAIA,IAAI,CAACN,EAAL,KAAYA,EAAhB,EAAoB;AAAC;AACnB,eAAO,EACL,GAAGM,IADE;AACI;AACTC,UAAAA,MAAM,EAAE,IAFH,CAES;;AAFT,SAAP;AAID,OALD,MAMI;AACA,eAAM,EACN,GAAGD,IADG;AAENC,UAAAA,MAAM,EAAE;AAFF,SAAN;AAIH;AACF,KAbgB,CAAjB,CAL+B,CAoB/B;;AACA,QAAId,KAAK,CAACe,SAAN,KAAoB,IAAxB,EAA8B;AAC5B,YAAMC,WAAW,GAAGhB,KAAK,CAACiB,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,EAApB;;AACA,UAAIH,WAAW,KAAKI,SAApB,EAA+B;AAC7B;AACAJ,QAAAA,WAAW,CAACK,IAAZ,CAAkBC,KAAD,IAAW;AAC1B;AACAtB,UAAAA,KAAK,CAACiB,QAAN,CAAeC,OAAf,CAAuBC,IAAvB;AACD,SAHD;AAID;AACF;AACF,GA/BD;;AAgCA,sBACE;AACE,IAAA,SAAS,EAAG,gBAAenB,KAAK,CAACa,IAAN,CAAWC,MAAX,GAAoB,UAApB,GAAiC,EAAG,EADjE;AAEE,IAAA,OAAO,EAAEb,iBAFX;AAAA,4BAIE;AAAK,MAAA,GAAG,EAAED,KAAK,CAACa,IAAN,CAAWU,IAArB;AAA2B,MAAA,GAAG,EAAEvB,KAAK,CAACa,IAAN,CAAWW;AAA3C;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,wBAAMxB,KAAK,CAACa,IAAN,CAAWU,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,wBAAMvB,KAAK,CAACa,IAAN,CAAWY,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA7CD;;KAAM1B,W;AA+CN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\n\nconst LibrarySong = (props) => {\n  const songSelectHandler = (e) => {\n    const selectedSong = props.songs.filter((state) => state.id === props.id); //filter returns us an array, also checks if the thing i clicked on equals the id from the state\n    console.log(e);\n    props.setCurrentSong(selectedSong[0]);\n    //Add Active State\n    const newSongs = props.songs.map((song) => {\n      if (song.id === id) {//id reps the song that we clicked on, son\n        return {\n          ...song, //keep the rest of the properties like the title, artist name the same\n          active: true, //but change the active to true\n        };\n      }\n      else{\n          return{\n          ...song, \n          active: false\n        }\n      }\n    });\n\n    //check if song is playing\n    if (props.isPlaying === true) {\n      const playPromise = props.audioRef.current.play();\n      if (playPromise !== undefined) {\n        //if what we clicked on is undefined, we should wait a bit\n        playPromise.then((audio) => {\n          // this is the wait, when it finally loads up we play it\n          props.audioRef.current.play();\n        });\n      }\n    }\n  };\n  return (\n    <div\n      className={`library-song ${props.song.active ? \"selected\" : \"\"}`}\n      onClick={songSelectHandler}\n    >\n      <img alt={props.song.name} src={props.song.cover}></img>\n      <div className=\"song-description\">\n        <h3> {props.song.name}</h3>\n        <h4> {props.song.artist}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}